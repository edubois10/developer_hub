redhat-developer-hub:
  global:
    dynamic:
      includes:
        # -- List of dynamic plugins included inside the `janus-idp/backstage-showcase` container image, some of which are disabled by default.
        # This file ONLY works with the `janus-idp/backstage-showcase` container image.
        - 'dynamic-plugins.default.yaml'

      # -- List of dynamic plugins, possibly overriding the plugins listed in `includes` files.
      plugins:
        - package: ./dynamic-plugins/dist/backstage-plugin-techdocs
          disabled: false
        - package: ./dynamic-plugins/dist/backstage-plugin-techdocs-backend-dynamic
          disabled: false
        #- package: ./dynamic-plugins/dist/backstage-plugin-catalog-backend-module-bitbucket-server-dynamic
        #  disabled: false
        #- package: ./dynamic-plugins/dist/backstage-plugin-scaffolder-backend-module-bitbucket-server-dynamic
        #  disabled: false
        - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd-backend-dynamic
          disabled: false
        - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd
          disabled: false
        #- package: ./dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic
        #  disabled: false
        #- package: ./dynamic-plugins/dist/backstage-plugin-kubernetes
        #  disabled: false
        #- package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-topology
        #  disabled: false
        #- package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-tekton
        #  disabled: false
        - package: './dynamic-plugins/dist/janus-idp-backstage-plugin-keycloak-backend-dynamic'
          disabled: false
          pluginConfig: {}

    auth:    
      backend:
        existingSecret: "rhdh-backend-auth"    
        enabled: true 
    clusterRouterBase: apps.cluster-tf45l.dynamic.redhatworkshops.io
  upstream:  
    backstage:
      extraAppConfig:
        - filename: app-config.base.yaml
          configMapRef: app-config-base
        - filename: app-config.bitbucket.yaml
          configMapRef: app-config-bitbucket
        - filename: app-config.keycloak.yaml
          configMapRef: app-config-keycloak
        - filename: app-config.rbac.yaml
          configMapRef: app-config-rbac
        - filename: app-config.techdocs.yaml
          configMapRef: app-config-techdocs
        # - filename: app-config.argocd.yaml
        #   configMapRef: app-configs-argocd
        # - filename: app-config.kubernetes.yaml
        #   configMapRef: app-configs-kubernetes
      image:      
        registry: registry.redhat.io
        repository: rhdh/rhdh-hub-rhel9    
        tag: '1.2-105.1719294777'
        #pullSecrets:
        #  - ''
  
      extraEnvVars:
        # Trust self Signed certificates
        #- name: LOG_LEVEL
        #  value: debug
        # Trust self Signed certificates
        - name: NODE_TLS_REJECT_UNAUTHORIZED
          value: '0'
        - name: BACKEND_SECRET
          valueFrom:
            secretKeyRef:
              key: backend-secret
              name: '{{ include "janus-idp.backend-secret-name" $ }}'
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: rhdh-postgres-auths
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              key: github-token
              name: rhdh-github-token
        - name: ARGOCD_USER
          valueFrom:
            secretKeyRef:
              key: argocd-username
              name: rhdh-argocd-auths
        - name: ARGOCD_RHDH_PASSWORD
          valueFrom:
            secretKeyRef:
              key: argocd-rhdh-password
              name: rhdh-argocd-auths
        - name: KUBERNETES_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: rhdh-kubernetes-token
        - name: RHDH_SESSION_SECRET
          valueFrom:
            secretKeyRef:
              key: session-secret
              name: keycloak-plugin
        - name: RHBK_RHDH_REALM_METADATA_URL
          valueFrom:
            secretKeyRef:
              key: realm-metadata-url
              name: keycloak-plugin
        - name: RHBK_RHDH_CLIENT_ID
          valueFrom:
            secretKeyRef:
              key: client-id
              name: keycloak-plugin
        - name: RHBK_RHDH_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: client-secret
              name: keycloak-plugin
        - name: RHBK_BASE_URL
          valueFrom:
            secretKeyRef:
              key: rhbk-base-url
              name: keycloak-plugin
        - name: RHBK_RHDH_REALM
          valueFrom:
            secretKeyRef:
              key: rhbk-rhdh-realm
              name: keycloak-plugin
        - name: RHDH_URL
          valueFrom:
            secretKeyRef:
              key: rhdh-url
              name: keycloak-plugin
        #- name: AWS_S3_ENDPOINT
        #  valueFrom:
        #    secretKeyRef:
        #      key: s3_endpoint
        #      name: rhdh-storage-secrets
        #- name: TECHDOCS_AWSS3_ACCESS_KEY_ID_CREDENTIAL
        #  valueFrom:
        #    secretKeyRef:
        #      key: access_key
        #      name: rhdh-storage-secrets
        #- name: TECHDOCS_AWSS3_SECRET_ACCESS_KEY_CREDENTIAL
        #  valueFrom:
        #    secretKeyRef:
        #      key: secret_access_key
        #      name: rhdh-storage-secrets


      extraVolumes:
        # -- Ephemeral volume that will contain the dynamic plugins installed by the initContainer below at start.
        #- name: dynamic-plugins-root
        #  ephemeral:
        #    volumeClaimTemplate:
        #      spec:
        #        accessModes:
        #          - ReadWriteOnce
        #        resources:
        #          requests:
        #            # -- Size of the volume that will contain the dynamic plugins. It should be large enough to contain all the plugins.
        #            storage: 2Gi
        #- name: rhdh-tls #Oauth
        #  secret:
        #    defaultMode: 420
        #    secretName: rhdh-tls

        # Volume that will expose the `dynamic-plugins.yaml` file from the `dynamic-plugins` config map.
        # The `dynamic-plugins` config map is created by the helm chart from the content of the `global.dynamic` field.
        - name: dynamic-plugins
          configMap:
            defaultMode: 420
            name: dynamic-plugins
            optional: true
        # Optional volume that allows exposing the `.npmrc` file (through a `dynamic-plugins-npmrc` secret)
        # to be used when running `npm pack` during the dynamic plugins installation by the initContainer.
        - name: dynamic-plugins-npmrc
          secret:
            defaultMode: 420
            optional: true
            secretName: dynamic-plugins-npmrc
    postgresql:
      enabled: true
      auth:
        existingSecret: "rhdh-postgres-auths"